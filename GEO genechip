rm(list = ls())

install.packages("...")
if(!requireNamespace("...", quietly = TRUE)) install.packages("BiocManager")

BiocManager::install('...')

if(F){
 library('GEOquery')
 library('gplots')
 library('limma') 
 setwd()
 eSet <- getGEO('...',destdir = ".",
                AnnotGPL = F,
                getGPL = F)
save(eSet,file='..._eSet.Rdata')

 load('..._eSet.Rdata')
 class(eSet)
 eSet = as.data.frame(eSet)
 b=eSet[[1]]
 exprSet=exprs(b)
 phe=pData(b)
 
 {boxplot(exprSet,outline=F, notch=T, las=2)
 
 library(limma) 
  exprSet=normalizeBetweenArrays(exprSet)
  boxplot(exprSet,outline=FALSE, notch=T, las=2)
 
 library(stringr)
  group_list= str_split(as.character(phe$title),' ',simplify = T)[,1]
  save(exprSet,group_list,
     file='..._exprSet.Rdata')
 
{expr.df <- read.table(file = "..._series_matrix.txt", header =TRUE,
                      comment.char = "!", row.names=1)  
                      ### matrix}
 
 gpl...	<- getGEO('...')
 gpl...
 write.csv(symbol,"symbol.csv")
 colnames(Table(...))
 symbol <- Table(gpl...)[c('ID','Gene Symbol')]; head(symbol)
 exprSet <- as.data.frame(exprSet)
 write.csv(exprSet,"exprSet.csv")

 sample <- phe$geo_accession
 treat_time <- rep(c("2h","18h"),each=11)
 treat_type <- rep(c("DN","ctrl"), c(9,13))
 design_df <- data.frame(sample, treat_type)
 
 TS <- paste( design_df$treat_type, sep=".")
 TS
 TS <- factor(TS, levels = unique(TS))
 design <- model.matrix(~0+TS)
 fit <- lmFit(exprSet, design)
 
 diff= cont.matrix <- makeContrasts(TSDN-TSctrl, levels=design) 
   #vs2  = TS18.PE2.0_embolized-TS2.PE2.0_embolized,
   #vs3  = TS18.PE1.3_embolized-TS2.PE1.3_embolized,

 fit2 <- contrasts.fit(fit, cont.matrix)
 results <- decideTests(fit2)
 vennDiagram(results)
 fit2 <- eBayes(fit2)
 tempOP = topTable(fit2,coef=1,n=Inf,adjust="BH") 
 nrDEG = na.omit(tempOP)
 write.csv(limmaOP,"limmaOP.csv")
 
 limmaOP <- read.csv("limmaOP.csv")
 length(intersect(limmaOP[,1],symbol[,1]))
 colnames(symbol);colnames(limmaOP)
 DEG=merge(limmaOP,symbol,by.x = "X",by.y = "ID")
 write.csv(DEG,"DEG.csv")
 
 getwd()
 results <- read.csv('results.csv', header = T)
 
 dim(exprSet);dim(exprSet1)
 expr.na <- expr[is.na(expr$Symbol)]; dim(expr.na)
 exprset2 <- expr[,-1]
 exprset3 <- exprset2[c(23,1:22)]; head(exprset3)
 failed <- exprset3[exprset3$Symbol=='',]
 head(failed)
 dim(failed)
 official.failed <- symbol[symbol$Symbol=='',]
 dim(official.failed)
 exprset4 <- exprset3[exprset3$Symbol!='',]; dim(exprset4)
 write.table(exprset3, file = 'results.txt', sep = "\t", row.names = F)
 
}

if(F){
  rm(list = ls())
 library("GEOquery")
 setwd('E:/Desktop/Data/GEO/GSE30529')
 gset <- getGEO("GSE30529", GSEMatrix =TRUE, AnnotGPL=TRUE )
 getGEOSuppFiles("GSE30529")
 setwd('GSE30529')
 untar('GSE30529_RAW.tar',exdir = 'data')  
 setwd('data')
 cels <- list.files() ; sapply(cels, gunzip)

 library(affy)
 affy.data <- ReadAffy()
 length(affy.data)
 eset.rma <- rma(affy.data)
 exprSet <- exprs(eset.rma)
 write.table(exprSet, "expr_rma_matrix.txt", quote=F, sep="\t")
 exprSet <- exprs(gset.rma)
}



 library('gplots')
 library('limma') 
 foldChange=0.5 
 padj=0.05
 exprSet=read.csv("exprSet.csv", row.names = 1)
dim(exprSet)
exprSet1=log2(exprSet)
par(mfrow=c(1,2))
boxplot(data.frame(exprSet),col="blue") 
exprSet[1:5,1:5]
group <- read.csv("eBayes.csv",header=TRUE,row.names=1,check.names = FALSE)
group <- group[,1] 
design <- model.matrix(~0+factor(group))
colnames(design)=levels(factor(group))
rownames(design)=colnames(exprSet)

fit <- lmFit(exprSet,design)
cont.matrix<-makeContrasts(paste0(unique(group),collapse = "-"),levels = design)
fit2=contrasts.fit(fit,cont.matrix)
fit2 <- eBayes(fit2)  ## default no trend !!!
##eBayes() with trend=TRUE
tempOutput = topTable(fit2,coef=1,n=Inf,adjust="BH") 
nrDEG = na.omit(tempOutput)

allDiff <- nrDEG
diff=allDiff
write.csv(diff, "limmaOut.csv")
diffSig = diff[(diff$P.Value < padj & (diff$logFC>foldChange | diff$logFC<(-foldChange))),]#ɸѡ????????????#
#write.table(diffSig, file="diffSig.xls",sep="\t",quote=F)#???????????????????ĵ?diffSig?????ļ?#
write.csv(diffSig, "diffSig.csv")
diffUp = diff[(diff$P.Value < padj & (diff$logFC>foldChange)),]
#write.table(diffUp, file="up.xls",sep="\t",quote=F)#39-42???ϵ????µ??ֱ?????up??down��???ļ?#
write.csv(diffUp, "diffUp.csv")
diffDown = diff[(diff$P.Value < padj & (diff$logFC<(-foldChange))),]
#write.table(diffDown, file="down.xls",sep="\t",quote=F)
write.csv(diffDown, "diffDown.csv")
       
